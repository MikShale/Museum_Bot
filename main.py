from random import shuffle
from time import sleep

import telebot
from telebot import types

from TOKEN import TOKEN
from consts import *
from questions import *


# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def start(message):
    # –ü—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã –æ–±–Ω—É–ª—è–µ–º –≤—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    global GAME_DATA
    GAME_DATA.update({
        "correct_answer": None,
        "museum": None,
        "difficulty": None,
        "current_state": "Select museum",
        "score": 0,
        "questions_iterator": None,
        "states_iterator": iter(STATES.items())
    })

    bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç—Ç–æ—Ç –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç!")
    sleep(1)
    choose_museum_and_difficulty(message)


def choose_museum_and_difficulty(message):
    global GAME_DATA
    try:
        text, buttons_name = next(GAME_DATA["states_iterator"])
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(*buttons_name)
        bot.send_message(message.chat.id, text, reply_markup=markup)
    except StopIteration:
        pass


def ask_question(message):
    global GAME_DATA
    try:
        current_question, answers = next(GAME_DATA["questions_iterator"])
        GAME_DATA["correct_answer"] = answers[0]
        shuffled_answers = answers.copy()
        shuffle(shuffled_answers)
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup.add(*shuffled_answers, row_width=2)
        bot.send_message(message.chat.id, current_question, reply_markup=markup)
    except StopIteration:
        end_game(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    global GAME_DATA
    if GAME_DATA.get("current_state") == "Select museum":
        GAME_DATA["current_state"] = "Select difficulty"
        GAME_DATA["museum"] = message.text
        choose_museum_and_difficulty(message)

    elif GAME_DATA.get("current_state") == "Select difficulty":
        GAME_DATA["current_state"] = "Ask questions"
        GAME_DATA["difficulty"] = message.text

        GAME_DATA["questions_iterator"] = iter(QUESTIONS[GAME_DATA["museum"]][GAME_DATA['difficulty']].items())

        ask_question(message)

    elif GAME_DATA.get("current_state") == "Ask questions":
        if message.text == GAME_DATA["correct_answer"]:
            bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
            GAME_DATA["score"] += 1
        else:
            bot.send_message(message.chat.id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ üòû\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {GAME_DATA["correct_answer"]}")
        ask_question(message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
def end_game(message):
    bot.send_message(message.chat.id, f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–∞—à —Å—á–µ—Ç: {GAME_DATA['score']}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
